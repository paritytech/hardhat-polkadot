name: Compile Nodes

on:
  pull_request:
  workflow_dispatch:
    inputs:
      node:
        description: Which node to build
        required: true
        default: all
        type: choice
        options:
          - all
          - dev-node
          - eth-rpc
      publish_release:
        description: Publish a GitHub Release with built binaries
        required: false
        default: false
        type: boolean

  workflow_call:
    inputs:
      node:
        description: Which node to build
        required: true
        default: all
        type: string
      publish_release:
        description: Publish a GitHub Release with built binaries
        required: false
        default: false
        type: boolean

permissions:
  contents: write

env:
  POLKADOT_SDK_REPO: "https://github.com/paritytech/polkadot-sdk.git"
  POLKADOT_SDK_BRANCH: "anp-dirty-node"

jobs:
  

  compile:
    name: Build ${{ matrix.node }} for ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        node: ["dev-node", "eth-rpc"]
        include:
          - target: x86_64-unknown-linux-gnu
            os_tag: linux
            arch_tag: x64
            runner: ubuntu-24.04
            exe_ext: ''
          - target: aarch64-apple-darwin
            os_tag: darwin
            arch_tag: arm64
            runner: macos-14
            exe_ext: ''
          - target: x86_64-apple-darwin
            os_tag: darwin
            arch_tag: x64
            runner: macos-13
            exe_ext: ''
          # Disabled for now
          # - target: x86_64-pc-windows-msvc
          #   os_tag: win32
          #   arch_tag: x64
          #   runner: windows-2022
          #   exe_ext: '.exe'
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Install shared dependencies (Linux)
        if: matrix.os_tag == 'linux'
        run: |
          sudo apt update
          sudo apt install -y openssl pkg-config g++ git clang cmake curl libssl-dev llvm libudev-dev libclang-dev make protobuf-compiler jq

      - name: Install brew
        if: matrix.os_tag == 'darwin'
        uses: Homebrew/actions/setup-homebrew@1ccc07ccd54b6048295516a3eb89b192c35057dc # master from 12.09.2024

      - name: Install shared dependencies (macOS)
        if: matrix.os_tag == 'darwin'
        run: |
          xcode-select --install || true
          brew install openssl pkg-config git curl llvm protobuf jq cmake

      - name: Checkout (repo context)
        uses: actions/checkout@v4

      - name: Clone polkadot-sdk
        shell: bash
        run: |
          git clone --depth 1 --branch "$POLKADOT_SDK_BRANCH" "$POLKADOT_SDK_REPO" polkadot-sdk

      - name: Read env variables from polkadot-sdk
        shell: bash
        run: |
          source polkadot-sdk/.github/env

          echo "Current IMAGE: $IMAGE"

          # extract rust version from "IMAGE=docker.io/paritytech/ci-unified:bullseye-1.88.0-2025-06-27-v202507221446"
          RUST_VERSION=$(echo "$IMAGE" | grep -oE '[0-9][.]+[0-9.]+')
          echo "RUST_VERSION=$RUST_VERSION" >> "$GITHUB_ENV"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: wasm32-unknown-unknown, ${{ matrix.target }}
          components: rustfmt, clippy, rust-src

      - name: Check environment
        run: |
          rustc --version
          cargo --version
          df -h

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            polkadot-sdk/target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ steps.toolchain.outputs.cachekey }}

      - name: Build selected binary/binaries
        working-directory: polkadot-sdk
        shell: bash
        run: |
          set -euxo pipefail
          case "${{ matrix.node }}" in
            dev-node)
              cargo build --release --target ${{ matrix.target }} -p revive-dev-node
              ;;
            eth-rpc)
              cargo build --release --target ${{ matrix.target }} -p pallet-revive-eth-rpc
              ;;
            *)
              cargo build --release --target ${{ matrix.target }} -p revive-dev-node -p pallet-revive-eth-rpc
              ;;
          esac

      - name: Stage artifact with OS/arch suffix
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p out
          case "${{ matrix.node }}" in
            dev-node)
              cp "polkadot-sdk/target/${{ matrix.target }}/release/revive-dev-node${{ matrix.exe_ext }}" "out/revive-dev-node-${{ matrix.os_tag }}-${{ matrix.arch_tag }}${{ matrix.exe_ext }}"
              ;;
            eth-rpc)
              cp "polkadot-sdk/target/${{ matrix.target }}/release/eth-rpc${{ matrix.exe_ext }}" "out/eth-rpc-${{ matrix.os_tag }}-${{ matrix.arch_tag }}${{ matrix.exe_ext }}"
              ;;
            *)
              cp "polkadot-sdk/target/${{ matrix.target }}/release/revive-dev-node${{ matrix.exe_ext }}" "out/revive-dev-node-${{ matrix.os_tag }}-${{ matrix.arch_tag }}${{ matrix.exe_ext }}"
              cp "polkadot-sdk/target/${{ matrix.target }}/release/eth-rpc${{ matrix.exe_ext }}" "out/eth-rpc-${{ matrix.os_tag }}-${{ matrix.arch_tag }}${{ matrix.exe_ext }}"
          esac

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-${{ matrix.os_tag }}-${{ matrix.arch_tag }}
          path: out/*
          if-no-files-found: error

  publish-release:
    name: Publish GitHub Release
    needs: compile
    if: ${{ inputs.publish_release == true }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List downloaded files
        run: |
          ls -la dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nodes-${{ github.run_id }}
          name: Nodes build ${{ github.run_id }}
          draft: false
          prerelease: true # to prevent marking as latest, since it should be a main npm package
          generate_release_notes: true
          files: |
            dist/*

      - name: Create/Update Latest Tag (nodes-latest)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nodes-latest
          name: Nodes latest
          draft: false
          prerelease: true # to prevent marking as latest, since it should be a main npm package
          generate_release_notes: false
          files: |
            dist/*